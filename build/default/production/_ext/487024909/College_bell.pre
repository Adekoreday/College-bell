
# 1 "C:/Users/systematic/Documents/embedded_project/XC8/CLOUDX_korede/SMART_BELL_NOKIA/College_bell.c"


# 51 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\CloudX/M633.h"
#pragma config FOSC = HS
#pragma config WDTE = OFF
#pragma config PWRTE = ON
#pragma config BOREN = OFF
#pragma config LVP = OFF
#pragma config CPD = OFF
#pragma config WRT = OFF
#pragma config CP = OFF

# 26 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 49 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\pic16f877a.h"
extern volatile unsigned char INDF @ 0x000;

asm("INDF equ 00h");



extern volatile unsigned char TMR0 @ 0x001;

asm("TMR0 equ 01h");



extern volatile unsigned char PCL @ 0x002;

asm("PCL equ 02h");



extern volatile unsigned char STATUS @ 0x003;

asm("STATUS equ 03h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
};
struct {
unsigned :2;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0x003;

# 154
extern volatile unsigned char FSR @ 0x004;

asm("FSR equ 04h");



extern volatile unsigned char PORTA @ 0x005;

asm("PORTA equ 05h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0x005;

# 209
extern volatile unsigned char PORTB @ 0x006;

asm("PORTB equ 06h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0x006;

# 270
extern volatile unsigned char PORTC @ 0x007;

asm("PORTC equ 07h");


typedef union {
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits @ 0x007;

# 331
extern volatile unsigned char PORTD @ 0x008;

asm("PORTD equ 08h");


typedef union {
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;
};
} PORTDbits_t;
extern volatile PORTDbits_t PORTDbits @ 0x008;

# 392
extern volatile unsigned char PORTE @ 0x009;

asm("PORTE equ 09h");


typedef union {
struct {
unsigned RE0 :1;
unsigned RE1 :1;
unsigned RE2 :1;
};
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits @ 0x009;

# 423
extern volatile unsigned char PCLATH @ 0x00A;

asm("PCLATH equ 0Ah");


typedef union {
struct {
unsigned PCLATH :5;
};
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits @ 0x00A;

# 442
extern volatile unsigned char INTCON @ 0x00B;

asm("INTCON equ 0Bh");


typedef union {
struct {
unsigned RBIF :1;
unsigned INTF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INTE :1;
unsigned TMR0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :2;
unsigned T0IF :1;
unsigned :2;
unsigned T0IE :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0x00B;

# 519
extern volatile unsigned char PIR1 @ 0x00C;

asm("PIR1 equ 0Ch");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned SSPIF :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned ADIF :1;
unsigned PSPIF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0x00C;

# 580
extern volatile unsigned char PIR2 @ 0x00D;

asm("PIR2 equ 0Dh");


typedef union {
struct {
unsigned CCP2IF :1;
unsigned :2;
unsigned BCLIF :1;
unsigned EEIF :1;
unsigned :1;
unsigned CMIF :1;
};
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits @ 0x00D;

# 619
extern volatile unsigned short TMR1 @ 0x00E;

asm("TMR1 equ 0Eh");



extern volatile unsigned char TMR1L @ 0x00E;

asm("TMR1L equ 0Eh");



extern volatile unsigned char TMR1H @ 0x00F;

asm("TMR1H equ 0Fh");



extern volatile unsigned char T1CON @ 0x010;

asm("T1CON equ 010h");


typedef union {
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
};
struct {
unsigned :2;
unsigned T1SYNC :1;
unsigned :1;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
struct {
unsigned :2;
unsigned T1INSYNC :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0x010;

# 711
extern volatile unsigned char TMR2 @ 0x011;

asm("TMR2 equ 011h");



extern volatile unsigned char T2CON @ 0x012;

asm("T2CON equ 012h");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned TOUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned TOUTPS0 :1;
unsigned TOUTPS1 :1;
unsigned TOUTPS2 :1;
unsigned TOUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0x012;

# 787
extern volatile unsigned char SSPBUF @ 0x013;

asm("SSPBUF equ 013h");



extern volatile unsigned char SSPCON @ 0x014;

asm("SSPCON equ 014h");


typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
} SSPCONbits_t;
extern volatile SSPCONbits_t SSPCONbits @ 0x014;

# 862
extern volatile unsigned short CCPR1 @ 0x015;

asm("CCPR1 equ 015h");



extern volatile unsigned char CCPR1L @ 0x015;

asm("CCPR1L equ 015h");



extern volatile unsigned char CCPR1H @ 0x016;

asm("CCPR1H equ 016h");



extern volatile unsigned char CCP1CON @ 0x017;

asm("CCP1CON equ 017h");


typedef union {
struct {
unsigned CCP1M :4;
unsigned CCP1Y :1;
unsigned CCP1X :1;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0x017;

# 937
extern volatile unsigned char RCSTA @ 0x018;

asm("RCSTA equ 018h");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned RCD8 :1;
unsigned :5;
unsigned RC9 :1;
};
struct {
unsigned :6;
unsigned nRC8 :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0x018;

# 1031
extern volatile unsigned char TXREG @ 0x019;

asm("TXREG equ 019h");



extern volatile unsigned char RCREG @ 0x01A;

asm("RCREG equ 01Ah");



extern volatile unsigned short CCPR2 @ 0x01B;

asm("CCPR2 equ 01Bh");



extern volatile unsigned char CCPR2L @ 0x01B;

asm("CCPR2L equ 01Bh");



extern volatile unsigned char CCPR2H @ 0x01C;

asm("CCPR2H equ 01Ch");



extern volatile unsigned char CCP2CON @ 0x01D;

asm("CCP2CON equ 01Dh");


typedef union {
struct {
unsigned CCP2M :4;
unsigned CCP2Y :1;
unsigned CCP2X :1;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
};
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits @ 0x01D;

# 1118
extern volatile unsigned char ADRESH @ 0x01E;

asm("ADRESH equ 01Eh");



extern volatile unsigned char ADCON0 @ 0x01F;

asm("ADCON0 equ 01Fh");


typedef union {
struct {
unsigned ADON :1;
unsigned :1;
unsigned GO_nDONE :1;
unsigned CHS :3;
unsigned ADCS :2;
};
struct {
unsigned :2;
unsigned GO :1;
unsigned CHS0 :1;
unsigned CHS1 :1;
unsigned CHS2 :1;
unsigned ADCS0 :1;
unsigned ADCS1 :1;
};
struct {
unsigned :2;
unsigned nDONE :1;
};
struct {
unsigned :2;
unsigned GO_DONE :1;
};
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits @ 0x01F;

# 1219
extern volatile unsigned char OPTION_REG @ 0x081;

asm("OPTION_REG equ 081h");


typedef union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nRBPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;

# 1288
extern volatile unsigned char TRISA @ 0x085;

asm("TRISA equ 085h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0x085;

# 1337
extern volatile unsigned char TRISB @ 0x086;

asm("TRISB equ 086h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0x086;

# 1398
extern volatile unsigned char TRISC @ 0x087;

asm("TRISC equ 087h");


typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits @ 0x087;

# 1459
extern volatile unsigned char TRISD @ 0x088;

asm("TRISD equ 088h");


typedef union {
struct {
unsigned TRISD0 :1;
unsigned TRISD1 :1;
unsigned TRISD2 :1;
unsigned TRISD3 :1;
unsigned TRISD4 :1;
unsigned TRISD5 :1;
unsigned TRISD6 :1;
unsigned TRISD7 :1;
};
} TRISDbits_t;
extern volatile TRISDbits_t TRISDbits @ 0x088;

# 1520
extern volatile unsigned char TRISE @ 0x089;

asm("TRISE equ 089h");


typedef union {
struct {
unsigned TRISE0 :1;
unsigned TRISE1 :1;
unsigned TRISE2 :1;
unsigned :1;
unsigned PSPMODE :1;
unsigned IBOV :1;
unsigned OBF :1;
unsigned IBF :1;
};
} TRISEbits_t;
extern volatile TRISEbits_t TRISEbits @ 0x089;

# 1576
extern volatile unsigned char PIE1 @ 0x08C;

asm("PIE1 equ 08Ch");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned SSPIE :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned ADIE :1;
unsigned PSPIE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0x08C;

# 1637
extern volatile unsigned char PIE2 @ 0x08D;

asm("PIE2 equ 08Dh");


typedef union {
struct {
unsigned CCP2IE :1;
unsigned :2;
unsigned BCLIE :1;
unsigned EEIE :1;
unsigned :1;
unsigned CMIE :1;
};
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits @ 0x08D;

# 1676
extern volatile unsigned char PCON @ 0x08E;

asm("PCON equ 08Eh");


typedef union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
};
struct {
unsigned nBO :1;
};
} PCONbits_t;
extern volatile PCONbits_t PCONbits @ 0x08E;

# 1709
extern volatile unsigned char SSPCON2 @ 0x091;

asm("SSPCON2 equ 091h");


typedef union {
struct {
unsigned SEN :1;
unsigned RSEN :1;
unsigned PEN :1;
unsigned RCEN :1;
unsigned ACKEN :1;
unsigned ACKDT :1;
unsigned ACKSTAT :1;
unsigned GCEN :1;
};
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits @ 0x091;

# 1770
extern volatile unsigned char PR2 @ 0x092;

asm("PR2 equ 092h");



extern volatile unsigned char SSPADD @ 0x093;

asm("SSPADD equ 093h");



extern volatile unsigned char SSPSTAT @ 0x094;

asm("SSPSTAT equ 094h");


typedef union {
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned :2;
unsigned I2C_READ :1;
unsigned I2C_START :1;
unsigned I2C_STOP :1;
unsigned I2C_DATA :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned READ_WRITE :1;
unsigned :2;
unsigned DATA_ADDRESS :1;
};
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits @ 0x094;

# 1950
extern volatile unsigned char TXSTA @ 0x098;

asm("TXSTA equ 098h");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned TXD8 :1;
unsigned :5;
unsigned nTX8 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0x098;

# 2030
extern volatile unsigned char SPBRG @ 0x099;

asm("SPBRG equ 099h");



extern volatile unsigned char CMCON @ 0x09C;

asm("CMCON equ 09Ch");


typedef union {
struct {
unsigned CM :3;
unsigned CIS :1;
unsigned C1INV :1;
unsigned C2INV :1;
unsigned C1OUT :1;
unsigned C2OUT :1;
};
struct {
unsigned CM0 :1;
unsigned CM1 :1;
unsigned CM2 :1;
};
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits @ 0x09C;

# 2105
extern volatile unsigned char CVRCON @ 0x09D;

asm("CVRCON equ 09Dh");


typedef union {
struct {
unsigned CVR :4;
unsigned :1;
unsigned CVRR :1;
unsigned CVROE :1;
unsigned CVREN :1;
};
struct {
unsigned CVR0 :1;
unsigned CVR1 :1;
unsigned CVR2 :1;
unsigned CVR3 :1;
};
} CVRCONbits_t;
extern volatile CVRCONbits_t CVRCONbits @ 0x09D;

# 2169
extern volatile unsigned char ADRESL @ 0x09E;

asm("ADRESL equ 09Eh");



extern volatile unsigned char ADCON1 @ 0x09F;

asm("ADCON1 equ 09Fh");


typedef union {
struct {
unsigned PCFG :4;
unsigned :2;
unsigned ADCS2 :1;
unsigned ADFM :1;
};
struct {
unsigned PCFG0 :1;
unsigned PCFG1 :1;
unsigned PCFG2 :1;
unsigned PCFG3 :1;
};
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits @ 0x09F;

# 2233
extern volatile unsigned char EEDATA @ 0x10C;

asm("EEDATA equ 010Ch");



extern volatile unsigned char EEADR @ 0x10D;

asm("EEADR equ 010Dh");



extern volatile unsigned char EEDATH @ 0x10E;

asm("EEDATH equ 010Eh");



extern volatile unsigned char EEADRH @ 0x10F;

asm("EEADRH equ 010Fh");



extern volatile unsigned char EECON1 @ 0x18C;

asm("EECON1 equ 018Ch");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
unsigned :3;
unsigned EEPGD :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0x18C;

# 2301
extern volatile unsigned char EECON2 @ 0x18D;

asm("EECON2 equ 018Dh");

# 2313
extern volatile __bit ACKDT @ (((unsigned) &SSPCON2)*8) + 5;

extern volatile __bit ACKEN @ (((unsigned) &SSPCON2)*8) + 4;

extern volatile __bit ACKSTAT @ (((unsigned) &SSPCON2)*8) + 6;

extern volatile __bit ADCS0 @ (((unsigned) &ADCON0)*8) + 6;

extern volatile __bit ADCS1 @ (((unsigned) &ADCON0)*8) + 7;

extern volatile __bit ADCS2 @ (((unsigned) &ADCON1)*8) + 6;

extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADFM @ (((unsigned) &ADCON1)*8) + 7;

extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;

extern volatile __bit BCLIE @ (((unsigned) &PIE2)*8) + 3;

extern volatile __bit BCLIF @ (((unsigned) &PIR2)*8) + 3;

extern volatile __bit BF @ (((unsigned) &SSPSTAT)*8) + 0;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit C1INV @ (((unsigned) &CMCON)*8) + 4;

extern volatile __bit C1OUT @ (((unsigned) &CMCON)*8) + 6;

extern volatile __bit C2INV @ (((unsigned) &CMCON)*8) + 5;

extern volatile __bit C2OUT @ (((unsigned) &CMCON)*8) + 7;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit CCP2IE @ (((unsigned) &PIE2)*8) + 0;

extern volatile __bit CCP2IF @ (((unsigned) &PIR2)*8) + 0;

extern volatile __bit CCP2M0 @ (((unsigned) &CCP2CON)*8) + 0;

extern volatile __bit CCP2M1 @ (((unsigned) &CCP2CON)*8) + 1;

extern volatile __bit CCP2M2 @ (((unsigned) &CCP2CON)*8) + 2;

extern volatile __bit CCP2M3 @ (((unsigned) &CCP2CON)*8) + 3;

extern volatile __bit CCP2X @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit CCP2Y @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 3;

extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 4;

extern volatile __bit CHS2 @ (((unsigned) &ADCON0)*8) + 5;

extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;

extern volatile __bit CKE @ (((unsigned) &SSPSTAT)*8) + 6;

extern volatile __bit CKP @ (((unsigned) &SSPCON)*8) + 4;

extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMIE @ (((unsigned) &PIE2)*8) + 6;

extern volatile __bit CMIF @ (((unsigned) &PIR2)*8) + 6;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit CVR0 @ (((unsigned) &CVRCON)*8) + 0;

extern volatile __bit CVR1 @ (((unsigned) &CVRCON)*8) + 1;

extern volatile __bit CVR2 @ (((unsigned) &CVRCON)*8) + 2;

extern volatile __bit CVR3 @ (((unsigned) &CVRCON)*8) + 3;

extern volatile __bit CVREN @ (((unsigned) &CVRCON)*8) + 7;

extern volatile __bit CVROE @ (((unsigned) &CVRCON)*8) + 6;

extern volatile __bit CVRR @ (((unsigned) &CVRCON)*8) + 5;

extern volatile __bit DATA_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit D_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit D_nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit EEIE @ (((unsigned) &PIE2)*8) + 4;

extern volatile __bit EEIF @ (((unsigned) &PIR2)*8) + 4;

extern volatile __bit EEPGD @ (((unsigned) &EECON1)*8) + 7;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit GCEN @ (((unsigned) &SSPCON2)*8) + 7;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit I2C_DATA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit I2C_READ @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit I2C_START @ (((unsigned) &SSPSTAT)*8) + 3;

extern volatile __bit I2C_STOP @ (((unsigned) &SSPSTAT)*8) + 4;

extern volatile __bit IBF @ (((unsigned) &TRISE)*8) + 7;

extern volatile __bit IBOV @ (((unsigned) &TRISE)*8) + 5;

extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;

extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;

extern volatile __bit OBF @ (((unsigned) &TRISE)*8) + 6;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit PCFG0 @ (((unsigned) &ADCON1)*8) + 0;

extern volatile __bit PCFG1 @ (((unsigned) &ADCON1)*8) + 1;

extern volatile __bit PCFG2 @ (((unsigned) &ADCON1)*8) + 2;

extern volatile __bit PCFG3 @ (((unsigned) &ADCON1)*8) + 3;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PEN @ (((unsigned) &SSPCON2)*8) + 2;

extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;

extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;

extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;

extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;

extern volatile __bit PSPIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit PSPIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit PSPMODE @ (((unsigned) &TRISE)*8) + 4;

extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RC0 @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit RC1 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit RC2 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit RC3 @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit RC4 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit RC5 @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit RC6 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit RC7 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RC8_9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RC9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RCD8 @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit RCEN @ (((unsigned) &SSPCON2)*8) + 3;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit RD0 @ (((unsigned) &PORTD)*8) + 0;

extern volatile __bit RD1 @ (((unsigned) &PORTD)*8) + 1;

extern volatile __bit RD2 @ (((unsigned) &PORTD)*8) + 2;

extern volatile __bit RD3 @ (((unsigned) &PORTD)*8) + 3;

extern volatile __bit RD4 @ (((unsigned) &PORTD)*8) + 4;

extern volatile __bit RD5 @ (((unsigned) &PORTD)*8) + 5;

extern volatile __bit RD6 @ (((unsigned) &PORTD)*8) + 6;

extern volatile __bit RD7 @ (((unsigned) &PORTD)*8) + 7;

extern volatile __bit RE0 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit RE1 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit RE2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit READ_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;

extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;

extern volatile __bit RSEN @ (((unsigned) &SSPCON2)*8) + 1;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit R_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit R_nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit SEN @ (((unsigned) &SSPCON2)*8) + 0;

extern volatile __bit SMP @ (((unsigned) &SSPSTAT)*8) + 7;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SSPEN @ (((unsigned) &SSPCON)*8) + 5;

extern volatile __bit SSPIE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit SSPIF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit SSPM0 @ (((unsigned) &SSPCON)*8) + 0;

extern volatile __bit SSPM1 @ (((unsigned) &SSPCON)*8) + 1;

extern volatile __bit SSPM2 @ (((unsigned) &SSPCON)*8) + 2;

extern volatile __bit SSPM3 @ (((unsigned) &SSPCON)*8) + 3;

extern volatile __bit SSPOV @ (((unsigned) &SSPCON)*8) + 6;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1INSYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRISC0 @ (((unsigned) &TRISC)*8) + 0;

extern volatile __bit TRISC1 @ (((unsigned) &TRISC)*8) + 1;

extern volatile __bit TRISC2 @ (((unsigned) &TRISC)*8) + 2;

extern volatile __bit TRISC3 @ (((unsigned) &TRISC)*8) + 3;

extern volatile __bit TRISC4 @ (((unsigned) &TRISC)*8) + 4;

extern volatile __bit TRISC5 @ (((unsigned) &TRISC)*8) + 5;

extern volatile __bit TRISC6 @ (((unsigned) &TRISC)*8) + 6;

extern volatile __bit TRISC7 @ (((unsigned) &TRISC)*8) + 7;

extern volatile __bit TRISD0 @ (((unsigned) &TRISD)*8) + 0;

extern volatile __bit TRISD1 @ (((unsigned) &TRISD)*8) + 1;

extern volatile __bit TRISD2 @ (((unsigned) &TRISD)*8) + 2;

extern volatile __bit TRISD3 @ (((unsigned) &TRISD)*8) + 3;

extern volatile __bit TRISD4 @ (((unsigned) &TRISD)*8) + 4;

extern volatile __bit TRISD5 @ (((unsigned) &TRISD)*8) + 5;

extern volatile __bit TRISD6 @ (((unsigned) &TRISD)*8) + 6;

extern volatile __bit TRISD7 @ (((unsigned) &TRISD)*8) + 7;

extern volatile __bit TRISE0 @ (((unsigned) &TRISE)*8) + 0;

extern volatile __bit TRISE1 @ (((unsigned) &TRISE)*8) + 1;

extern volatile __bit TRISE2 @ (((unsigned) &TRISE)*8) + 2;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TX8_9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXD8 @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit UA @ (((unsigned) &SSPSTAT)*8) + 1;

extern volatile __bit WCOL @ (((unsigned) &SSPCON)*8) + 7;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nBO @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;

extern volatile __bit nRC8 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;

extern volatile __bit nTX8 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit nWRITE @ (((unsigned) &SSPSTAT)*8) + 2;


# 27 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\pic.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 77
extern unsigned int flash_read(unsigned short addr);

# 114 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 151 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\pic.h"
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 186
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;

# 176 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\CloudX/libr.h"
void delay(unsigned int dell){
while(dell-- != 0) _delay((unsigned long)((1)*(20000000/4000.0)));
}

# 267
typedef union{
struct{
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
}Port_t;

extern volatile Port_t port1 @ 0x006;

typedef union{
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;

};
} pinModer_t;
extern volatile pinModer_t port1Mode @ 0x086;

typedef union{
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;

};
} pinModeAr_t;
extern volatile pinModeAr_t port2Mode @ 0x088;




typedef union{
struct {
unsigned RD0 :1;
unsigned RD1 :1;
unsigned RD2 :1;
unsigned RD3 :1;
unsigned RD4 :1;
unsigned RD5 :1;
unsigned RD6 :1;
unsigned RD7 :1;

};
} pinModeBr_t;
extern volatile pinModeBr_t port2 @ 0x008;

# 341
portMode(unsigned char ports, unsigned char bits){
if(ports == 1) TRISB= bits;
if(ports == 2) TRISD= bits;
if(ports == 3) TRISC= bits;
}

portWrite(unsigned char ports, unsigned char bits){
if(ports == 1) PORTB= bits;
if(ports == 2) PORTD= bits;
if(ports == 3) PORTC= bits;
}

PinSelect(char selPins, char segState){
switch(selPins){
case 1: if (segState) RB0=1; else RB0=0; break;
case 2: if (segState) RB1=1; else RB1=0; break;
case 3: if (segState) RB2=1; else RB2=0; break;
case 4: if (segState) RB3=1; else RB3=0; break;
case 5: if (segState) RB4=1; else RB4=0; break;
case 6: if (segState) RB5=1; else RB5=0; break;
case 7: if (segState) RB6=1; else RB6=0; break;
case 8: if (segState) RB7=1; else RB7=0; break;
case 9: if (segState) RD0=1; else RD0=0; break;

case 10: if (segState) RD1=1; else RD1=0; break;
case 11: if (segState) RD2=1; else RD2=0; break;
case 12: if (segState) RD3=1; else RD3=0; break;
case 13: if (segState) RD4=1; else RD4=0; break;
case 14: if (segState) RD5=1; else RD5=0; break;
case 15: if (segState) RD6=1; else RD6=0; break;
case 16: if (segState) RD7=1; else RD7=0; break;
default: break;
}

}


void pinMode(char segPortSel, char stater){
switch(segPortSel){
case 1: if(stater==0) TRISB0=0; else TRISB0=1 ; RB0=0;break;
case 2: if(stater==0) TRISB1=0; else TRISB1=1 ; RB1=0;break;
case 3: if(stater==0) TRISB2=0; else TRISB2=1; RB2=0;break;
case 4: if(stater==0) TRISB3=0; else TRISB3=1; RB3=0;break;
case 5: if(stater==0) TRISB4=0; else TRISB4=1; RB4=0;break;
case 6: if(stater==0) TRISB5=0; else TRISB5=1; RB5=0;break;
case 7: if(stater==0) TRISB6=0; else TRISB6=1; RB6=0;break;
case 8: if(stater==0) TRISB7=0; else TRISB7=1; RB7=0;break;
case 9: if(stater==0) TRISD0=0; else TRISD0=1; RD0=0;break;
case 10: if(stater==0) TRISD1=0; else TRISD1=1; RD1=0;break;
case 11: if(stater==0) TRISD2=0; else TRISD2=1; RD2=0;break;
case 12: if(stater==0) TRISD3=0; else TRISD3=1; RD3=0;break;
case 13: if(stater==0) TRISD4=0; else TRISD4=1; RD4=0;break;
case 14: if(stater==0) TRISD5=0; else TRISD5=1; RD5=0;break;
case 15: if(stater==0) TRISD6=0; else TRISD6=1; RD6=0;break;
case 16: if(stater==0) TRISD7=0; else TRISD7=1; RD7=0;break;
default: break;
}
}
unsigned char readPin(unsigned char stater){
switch (stater){
case 1: if (RB0 == 1) return 1; else return 0;
case 2: if (RB1 == 1) return 1; else return 0;
case 3: if (RB2 == 1) return 1; else return 0;
case 4: if (RB3 == 1) return 1; else return 0;
case 5: if (RB4 == 1) return 1; else return 0;
case 6: if (RB5 == 1) return 1; else return 0;
case 7: if (RB6 == 1) return 1; else return 0;
case 8: if (RB7 == 1) return 1; else return 0;
case 9: if (RD0 == 1) return 1; else return 0;

case 10: if (RD1 == 1) return 1; else return 0;
case 11: if (RD2 == 1) return 1; else return 0;
case 12: if (RD3 == 1) return 1; else return 0;
case 13: if (RD4 == 1) return 1; else return 0;
case 14: if (RD5 == 1) return 1; else return 0;
case 15: if (RD6 == 1) return 1; else return 0;
case 16: if (RD7 == 1) return 1; else return 0;
}
}

# 30 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double) ;
extern double cos(double) ;
extern double tan(double) ;
extern double asin(double) ;
extern double acos(double) ;
extern double atan(double);
extern double atan2(double, double) ;
extern double log(double);
extern double log10(double);
extern double pow(double, double) ;
extern double exp(double) ;
extern double sinh(double) ;
extern double cosh(double) ;
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 120 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\CloudX/Ds1302.h"
char Clock;
char Data;
char RST;

void Shift_out_byte_right(char data);
char shift_in_byte();
void Write_ds1302_byte(char cmd);
void DS1302_write(char cmd, char data);
char DS1302_read(char cmd );
void DS1302_init(char CLK, char DAT, char CE );
char Binary2BCD(char aa);
char BCD2Binary(char aa);



void Time_read(char *hr,char *min,char *sec);
void Date_read(char *day, char *month, char *year, char *date);
void RAM_write(char address, char data);
char RAM_read(char address);
void DateTime_write(char day, char month,char year,char date,char hr,char min,char seconds);
void Time_write(char hr,char min,char seconds);
void Date_write(char date,char month,char year);
unsigned char BCD2UpperCh(unsigned char bcd);
unsigned char BCD2LowerCh(unsigned char bcd);

# 150
char IntToChar(char x);

# 171
void DS1302_init(char CLK, char DAT, char CE ){
Clock = CLK;
Data = DAT;
RST = CE;
char x;
pinMode(Clock,0);
pinMode(RST,0);
PinSelect(Clock, 0);
PinSelect(RST,0);

# 186
DS1302_write(0x8E,0);



DS1302_write(0x90,0xA5);

x = DS1302_read(0x81);
if((x & 0x80)!=0){
DS1302_write(0x80,0);
}
}



char DS1302_read(char cmd ){
pinMode(Data,1);
char dataRead=0x00;
PinSelect(RST,1);
Write_ds1302_byte(cmd);
dataRead = shift_in_byte();
pinMode(Data,0);
PinSelect(RST,0);

return dataRead;
}




void Write_ds1302_byte(char cmd){
pinMode(Data,0);
PinSelect(Data,0);
Shift_out_byte_right(cmd);
pinMode(Data,1);

}


void DS1302_write(char cmd, char data){
PinSelect(RST,1);
Write_ds1302_byte(cmd);
Write_ds1302_byte(data);
PinSelect(RST,0);
PinSelect(Clock, 0);
}




void RAM_write(char address, char data){
data = Binary2BCD(data);
DS1302_write( (address|0xC0) ,data);
}

char RAM_read(char address){
char data = 0x00;
data = DS1302_read(address|0xC1);
data = BCD2Binary(data);
return data;

}



char shift_in_byte(){
char temp, data=0x00;
for(char i=1;i<=8;i++){
temp = readPin(Data);
temp= (temp<<7);
data=(data>>1);
data = (temp | data);
PinSelect(Clock, 1);
PinSelect(Clock, 0);
}
return data;
}



void Shift_out_byte_right(char data){
char i;
for (i=0; i<8; i++){
if(data & 0x01){
PinSelect(Data,1);
}else{
PinSelect(Data,0);
}
PinSelect(Clock, 1);
PinSelect(Clock, 0);
data = data>>1;

}

}


void DateTime_write(char day, char month,char year,char date,char hr,char min,char seconds){
min = Binary2BCD(min);
hr = Binary2BCD(hr);
seconds = Binary2BCD(seconds);
day = Binary2BCD(day);
month = Binary2BCD(month);
year = Binary2BCD(year);
date = Binary2BCD(date);

DS1302_write( 0x82,min);
DS1302_write(0x84, hr);
DS1302_write(0x8A,day);
DS1302_write(0x88,month);
DS1302_write(0x86,date);
DS1302_write(0x8C ,year);
DS1302_write(0x80,seconds);

}

void Time_write(char hr,char min,char seconds){
min = Binary2BCD(min);
hr = Binary2BCD(hr);
seconds = Binary2BCD(seconds);


DS1302_write( 0x82,min);
DS1302_write(0x84, hr);
DS1302_write(0x80,seconds);
}


void Date_write(char date,char month,char year){
date = Binary2BCD(date);
month = Binary2BCD(month);
year = Binary2BCD(year);


DS1302_write( 0x86,date);
DS1302_write(0x88,month);
DS1302_write(0x8C,year);
}


void Time_read( char *hr,char *min,char *sec){

*sec =DS1302_read(0x81 );
*min = DS1302_read(0x83);
*hr = DS1302_read(0x85);
}

void Date_read(char *day, char *month, char *year, char *date){

*day= DS1302_read(0x8B );
*month = DS1302_read(0x89);
*year = DS1302_read(0x8D);
*date = DS1302_read(0x87);

}

# 346
unsigned char BCD2UpperCh(unsigned char bcd)
{
return ((bcd >> 4) | 48);
}


unsigned char BCD2LowerCh(unsigned char bcd)
{
return ((bcd & 0x0F) | 48);
}



char Binary2BCD(char aa)
{
char t1, t2;
t1 = aa%10;
t1 = t1 & 0x0F;
aa = aa/10;
t2 = aa%10;
t2 = 0x0F & t2;
t2 = t2 << 4;
t2 = 0xF0 & t2;
t1 = t1 | t2;
return t1;
}

char BCD2Binary(char aa)
{
char rr,tt;
tt = aa & 0x0F;
rr = tt;
aa = 0xF0 & aa;
tt = aa >> 4;
tt = 0x0F & tt;
rr = tt*10 + rr;
return rr;
}

char IntToChar(char x){
x = Binary2BCD(x);


}

# 205 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\CloudX/LCD5110.h"
unsigned char colCheck, rowCheck;

char _Clk, _DIn, _DC, _CE, _Rset;

# 221
unsigned char fontWidth, fontOffset;


LCD5110_internalWrite(unsigned char Data__Command, unsigned char dataByte) {
unsigned char _data, i;
_data = dataByte;
if(Data__Command == 0)
PinSelect(_DC, 0);
else
PinSelect(_DC, 1);

PinSelect(_CE, 0);
for(i=0;i<8;i++) {
PinSelect(_Clk, 0);
if(_data & 0x80)
PinSelect(_DIn, 1);
else
PinSelect(_DIn, 0);
PinSelect(_Clk, 1);
_data = _data << 1;
PinSelect(_Clk, 0);
}

PinSelect(_CE, 1);
}

startCommand() {
LCD5110_internalWrite(0, 0x21);
LCD5110_internalWrite(0, 0xB5);
LCD5110_internalWrite(0, 0x04);
LCD5110_internalWrite(0, 0x14);
LCD5110_internalWrite(0, 0x20);
LCD5110_internalWrite(0, 0x0C);
}


gotoXY(unsigned char Y, unsigned char X) {
X*= 7;
colCheck = X;
LCD5110_internalWrite(0, (0x40 | Y));
LCD5110_internalWrite(0, (0x80 | X));
}

void LCD5110_startRow(unsigned char row){
LCD5110_internalWrite(0, (0x40 | row));
}

void LCD5110_startCol(unsigned char col){
LCD5110_internalWrite(0, (0x80 | col));
}
LCD5110_image(char *userArray, char dispType){
for (int pointer = 0; pointer < (84 * 48 / 8); pointer++)
LCD5110_internalWrite(1, 0x00);
gotoXY(0, 0);
switch(dispType){
case 0x00: {LCD5110_internalWrite(0, 0x20);
LCD5110_internalWrite(0, 0x0C);
break;
}
case 0xFF: {LCD5110_internalWrite(0, 0x20);
LCD5110_internalWrite(0, 0x0D);
break;
}
}
for (int pointer = 0; pointer < (84 * 48 / 8); pointer++)
LCD5110_internalWrite(1, userArray[pointer]);
}

LCD5110_inWrite(char roww, char coll, char dat) {
colCheck = coll;
rowCheck = roww;
if(coll > 84);
else {
LCD5110_startCol(coll);
LCD5110_internalWrite(1, dat);
}
}

LCD5110_writeCP(const unsigned char *userFont, unsigned char fontWidth, unsigned char fontOffset, char character)
{
unsigned char pos_x = 0, _data;
LCD5110_internalWrite(1, 0x00);
colCheck++;
while(pos_x < fontWidth) {
_data = userFont[((character - fontOffset) * fontWidth) + pos_x++];
LCD5110_inWrite(rowCheck, colCheck++, _data);
}
LCD5110_internalWrite(1, 0x00);
colCheck++;
}

LCD5110_write(const unsigned char *userFont, unsigned char fontWidth, unsigned char fontOffset, unsigned char row, unsigned char col, char character, char dispType)
{
switch(dispType){
case 0x00: {LCD5110_internalWrite(0, 0x20);
LCD5110_internalWrite(0, 0x0C);
break;
}
case 0xFF: {LCD5110_internalWrite(0, 0x20);
LCD5110_internalWrite(0, 0x0D);
break;
}
}
gotoXY((row-1), (col-1));
unsigned char pos_x = 0, _data;
LCD5110_internalWrite(1, 0x00);
colCheck++;
while(pos_x < fontWidth) {
_data = userFont[((character - fontOffset) * fontWidth) + pos_x++];
LCD5110_inWrite(row, colCheck++, _data);
}
LCD5110_internalWrite(1, 0x00);
colCheck++;
}


LCD5110_writeTextCP(const unsigned char *userFont, unsigned char fontWidth, unsigned char fontOffset, char *characters) {
while (*characters)
LCD5110_writeCP(userFont, fontWidth, fontOffset, *characters++);
}

LCD5110_writeText(const unsigned char *userFont, unsigned char fontWidth, unsigned char fontOffset, unsigned char row, unsigned char col, char *characters, char dispType) {
switch(dispType){
case 0x00: {LCD5110_internalWrite(0, 0x20);
LCD5110_internalWrite(0, 0x0C);
break;
}
case 0xFF: {LCD5110_internalWrite(0, 0x20);
LCD5110_internalWrite(0, 0x0D);
break;
}
}
gotoXY((row-1), (col-1));
while (*characters) {
LCD5110_writeCP(userFont, fontWidth, fontOffset, *characters++);
}
}

void LCD5110_fillScreen(unsigned char bytez){
for (int pointer = 0; pointer < (84 * 48 / 8); pointer++)
LCD5110_internalWrite(1, bytez);
}

void LCD5110_clear() {
for (int pointer = 0; pointer < (84 * 48 / 8); pointer++)
LCD5110_internalWrite(1, 0x00);
gotoXY(0, 0);
}

void LCD5110_settings(char Clk, char DIn, char DC, char CE, char Rset) {
pinMode(Clk, 0);
pinMode(DIn, 0);
pinMode(DC, 0);
pinMode(CE, 0);
pinMode(Rset, 0);

PinSelect(Rset, 0);
PinSelect(Rset, 1);

_Clk = Clk; _DIn = DIn; _DC = DC; _CE = CE; _Rset = Rset;
}

void LCD5110_setting(char Rset, char CE, char DC, char DIn, char Clk)
{

LCD5110_settings(Clk, DIn, DC, CE, Rset);
startCommand();
}

# 33 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\CloudX/Serial.h"
void serialBegin(const unsigned long baudd){
SPBRG = (20000000 - (baudd*16)) / (baudd*16);
TXSTA = 0x24;
RCSTA = 0x90;

}

void serialWrite(unsigned char SerTx)
{
TXSTAbits.TXEN =1;
TXREG = SerTx;
_delay((unsigned long)((5)*(20000000/4000.0)));
}

void serialWriteText(unsigned char *Sertxxt){
unsigned char pnttter=0;
while(Sertxxt[pnttter] != 0)
serialWrite(Sertxxt[pnttter++]);
}

unsigned char serialRead(){
RCSTAbits.CREN =1;
PIR1bits.RCIF=0;
RCSTAbits.CREN = 1;
return RCREG;
}


unsigned char Serial_available(){
RCSTAbits.CREN =1;
if(RCSTAbits.OERR) {RCSTAbits.CREN = 0; RCSTAbits.CREN =1;}
return PIR1bits.RCIF;
}

# 75 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\CloudX/Keypad.h"
char *KRowPins, *KColPins, *KMap, KIT, KRows, KCols;
unsigned char Indicator;

void KeypadSetting(unsigned char InputType, unsigned char *KRowPinsA, unsigned char *KColPinsA,unsigned char KRowss, unsigned char KColss, char *KMapA, unsigned char indicatorPin)
{
char KeyLoad;
KIT = InputType;
KRows = KRowss;
KCols = KColss;
KRowPins = KRowPinsA;
KColPins = KColPinsA;
KMap = KMapA;
Indicator = indicatorPin;

for(KeyLoad=0; KeyLoad<KRowss; KeyLoad++) KRowPins[KeyLoad] = KRowPinsA[KeyLoad];
for(KeyLoad=0; KeyLoad<KColss; KeyLoad++) KColPins[KeyLoad] = KColPinsA[KeyLoad];

if(KIT==0 || KIT==1 )
{
for(KeyLoad=0; KeyLoad<KRowss; KeyLoad++) pinMode(KRowPins[KeyLoad], 0);
for(KeyLoad=0; KeyLoad<KColss; KeyLoad++) pinMode(KColPins[KeyLoad], 1);
}
if(KIT==2 || KIT==3)
{
for(KeyLoad=0; KeyLoad<KRowss; KeyLoad++) pinMode(KRowPins[KeyLoad], 1);
for(KeyLoad=0; KeyLoad<KColss; KeyLoad++) pinMode(KColPins[KeyLoad], 0);
}

if(indicatorPin) pinMode(indicatorPin, 0);
}


char getKey(){
char i, Row, Col, Map=0, KeyTell=0, KeyPress;


if(KIT==0){
for(Row=0; Row<KRows; Row++ ){
Map = Row;
for(i=0; i<KRows; i++){
PinSelect(KRowPins[i], 1);
PinSelect(KRowPins[Map], 0);
}
for(Col =0; Col<KCols; Col++ ){
if(readPin(KColPins[Col]) == 0){
if(Indicator) {
PinSelect(Indicator, 1); _delay((unsigned long)((300)*(20000000/4000.0))); PinSelect(Indicator, 0); KeyTell=1; KeyPress = KMap[(Row*KCols)+Col]; }
else {
_delay((unsigned long)((300)*(20000000/4000.0))); KeyTell=1; KeyPress = KMap[(Row*KCols)+Col];}
}
_delay((unsigned long)((5)*(20000000/4000.0)));
}
}
for(i=0; i<KRows; i++) PinSelect(KRowPins[i], 1);
}

if(KIT==1){
for(Row=0; Row<KRows; Row++ ){
Map = Row;
for(i=0; i<KRows; i++){
PinSelect(KRowPins[i], 0);
PinSelect(KRowPins[Map], 1);
}
for(Col =0; Col<KCols; Col++ ){
if(readPin(KColPins[Col]) == 1){
if(Indicator) {
PinSelect(Indicator, 1); _delay((unsigned long)((300)*(20000000/4000.0))); PinSelect(Indicator, 0); KeyTell=1; KeyPress = KMap[(Row*KCols)+Col];}
else {
_delay((unsigned long)((300)*(20000000/4000.0))); KeyTell=1; KeyPress = KMap[(Row*KCols)+Col];}
}
_delay((unsigned long)((5)*(20000000/4000.0)));
}
}
for(i=0; i<KRows; i++) PinSelect(KRowPins[i], 0);
}



if(KIT==2){
for(Row=0; Row<KCols; Row++ ){
Map = Row;
for(i=0; i<KRows; i++){
PinSelect(KColPins[i], 1);
PinSelect(KColPins[Map], 0);
}
for(Col =0; Col<KRows; Col++ ){
if(readPin(KRowPins[Col]) == 0){
if(Indicator) {
PinSelect(Indicator, 1); _delay((unsigned long)((300)*(20000000/4000.0))); PinSelect(Indicator, 0); KeyTell=1; KeyPress = KMap[(Col*KCols)+Row];}
else {
_delay((unsigned long)((300)*(20000000/4000.0))); KeyTell=1; KeyPress = KMap[(Col*KCols)+Row];}
}
_delay((unsigned long)((5)*(20000000/4000.0)));
}
}
for(i=0; i<KCols; i++) PinSelect(KColPins[i] , 1);
}

if(KIT==3){
for(Row=0; Row<KCols; Row++ ){
Map = Row;
for(i=0; i<KRows; i++){
PinSelect(KColPins[i] ,0);
PinSelect(KColPins[Map] ,1);
}
for(Col =0; Col<KRows; Col++ ){
if(readPin(KRowPins[Col]) == 1){
if(Indicator) {
PinSelect(Indicator, 1); _delay((unsigned long)((300)*(20000000/4000.0))); PinSelect(Indicator, 0); KeyTell=1; KeyPress = KMap[(Col*KCols)+Row];}
else {
_delay((unsigned long)((300)*(20000000/4000.0))); KeyTell=1; KeyPress = KMap[(Col*KCols)+Row];}
}
_delay((unsigned long)((5)*(20000000/4000.0)));
}
}
for(i=0; i<KCols; i++) PinSelect(KColPins[i], 0);
}

if(KeyTell) return KeyPress;
else return 0;
}

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\__size_t.h"
typedef unsigned size_t;

# 14 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 34
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 106 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\CloudX\Font.h"
const unsigned char FONT_3x5[]={
0x00, 0x00, 0x00,
0x17, 0x00, 0x00,
0x03, 0x00, 0x03,
0x0A, 0x1F, 0x0A,
0x16, 0x13, 0x1A,
0x09, 0x04, 0x0A,
0x0A, 0x15, 0x1A,
0x03, 0x00, 0x00,
0x00, 0x0E, 0x11,
0x11, 0x0E, 0x00,
0x06, 0x06, 0x00,
0x04, 0x0E, 0x04,
0x0C, 0x1C, 0x00,
0x04, 0x04, 0x04,
0x10, 0x00, 0x00,
0x18, 0x04, 0x03,
0x1F, 0x11, 0x1F,
0x02, 0x1F, 0x00,
0x1D, 0x15, 0x17,
0x15, 0x15, 0x1F,
0x0F, 0x08, 0x1E,
0x17, 0x15, 0x1D,
0x1F, 0x15, 0x1D,
0x01, 0x01, 0x1F,
0x1F, 0x15, 0x1F,
0x17, 0x15, 0x1F,
0x00, 0x0A, 0x00,
0x00, 0x1A, 0x00,
0x04, 0x0A, 0x11,
0x0A, 0x0A, 0x0A,
0x11, 0x0A, 0x04,
0x00, 0x15, 0x07,
0x1F, 0x15, 0x17,
0x1F, 0x05, 0x1F,
0x1F, 0x15, 0x1B,
0x1F, 0x11, 0x11,
0x1F, 0x11, 0x0E,
0x1F, 0x15, 0x15,
0x1F, 0x05, 0x01,
0x1F, 0x11, 0x1D,
0x1F, 0x04, 0x1F,
0x11, 0x1F, 0x11,
0x08, 0x10, 0x0F,
0x1F, 0x04, 0x1B,
0x1F, 0x10, 0x10,
0x1F, 0x06, 0x1F,
0x1C, 0x04, 0x1C,
0x1F, 0x11, 0x1F,
0x1F, 0x05, 0x07,
0x0E, 0x19, 0x1E,
0x1F, 0x05, 0x1B,
0x17, 0x15, 0x1D,
0x01, 0x1F, 0x01,
0x1F, 0x10, 0x1F,
0x0F, 0x10, 0x0F,
0x1F, 0x0C, 0x1F,
0x1B, 0x04, 0x1B,
0x17, 0x14, 0x1F,
0x19, 0x15, 0x13,
0x00, 0x1F, 0x11,
0x03, 0x04, 0x18,
0x11, 0x1F, 0x00,
0x06, 0x01, 0x06,
0x10, 0x10, 0x10,
0x01, 0x01, 0x02,
0x18, 0x14, 0x1C,
0x1F, 0x14, 0x1C,
0x1C, 0x14, 0x14,
0x1C, 0x14, 0x1F,
0x0C, 0x1A, 0x14,
0x04, 0x1E, 0x05,
0x17, 0x15, 0x1E,
0x1F, 0x04, 0x1C,
0x00, 0x1D, 0x00,
0x08, 0x10, 0x0D,
0x1F, 0x0C, 0x1A,
0x00, 0x1F, 0x00,
0x18, 0x0C, 0x18,
0x18, 0x04, 0x18,
0x1E, 0x12, 0x1E,
0x1F, 0x05, 0x07,
0x07, 0x05, 0x1F,
0x1E, 0x04, 0x04,
0x12, 0x15, 0x09,
0x02, 0x1F, 0x02,
0x1C, 0x10, 0x1C,
0x0C, 0x10, 0x0C,
0x0C, 0x18, 0x0C,
0x14, 0x08, 0x14,
0x16, 0x18, 0x06,
0x04, 0x1C, 0x10,
0x04, 0x0E, 0x11,
0x00, 0x1F, 0x00,
0x11, 0x0E, 0x04,
0x02, 0x04, 0x02,
0x1F, 0x1F, 0x1F
};

# 13 "C:/Users/systematic/Documents/embedded_project/XC8/CLOUDX_korede/SMART_BELL_NOKIA/College_bell.c"
char readAndStore(char *Time, unsigned char x);
unsigned char writeArrayToRAM(char *timearray,unsigned char address);
void ReadArrayFromRAM(char *timearray);
unsigned char compareTimeArray(char time[], char time2[],int size);
unsigned char SetupTime(char *timearray);
unsigned char readKeys(char *time);
void LCD_clear();
char Keys1;

unsigned char keypadMap[10]={0,1,2,3,4,5,6,7,8,9};

unsigned char lastwriteaddr=0;
unsigned int lastwritecount =0;
void main(void){

pinMode(6, 0);
PinSelect(6,0);

unsigned char minutes=0;
unsigned char seconds=0;
unsigned char hours=0;

DS1302_init(8,7,12);

serialBegin(9600);

LCD5110_setting(1, 2, 3, 4, 5 );

char time[9] = {'0','0',':','0','0',':','0','0','\0'};
char time2[9] = {'0','0',':','0','0',':','0','0','\0'};
LCD5110_clear();

# 51
char KeypadCharacters[4][3] = {
'1','2','3',
'4','5','6',
'7','8','9',
'*','0','#'
};
char RowPins[4] = {13,14,15,16};
char ColumnsPins[3] = {9,10,11};

char Keys;

KeypadSetting(2, RowPins, ColumnsPins, 4, 3, KeypadCharacters,6);


while(1){

LCD5110_writeText(FONT_3x5, 3,32, 1, 2, "SMART-BELL", 0x00);
LCD5110_writeText(FONT_3x5,3,32, 2, 4, "USING", 0x00);
LCD5110_writeText(FONT_3x5,3,32, 3,3, "CLOUDX", 0x00);

unsigned int Ringsno1=0;

Time_read( &hours,&minutes,&seconds);


time[0]= BCD2UpperCh(hours);
time[1]=BCD2LowerCh(hours);
time[3]=BCD2UpperCh(minutes);
time[4]= BCD2LowerCh(minutes);
time[6]= BCD2UpperCh(seconds);
time[7]= BCD2LowerCh(seconds);

char ringsno[];


LCD5110_writeText(FONT_3x5,3,32, 5, 2, "TIME:", 0x00);
LCD5110_writeText(FONT_3x5,3,32, 5,6,time, 0x00);

# 95
if(lastwriteaddr!=0){

lastwritecount = lastwriteaddr;
while(lastwritecount !=0) {
lastwritecount -=2;
ReadArrayFromRAM(time2);


serialWriteText(time2);
serialWriteText("\r\n");
if(compareTimeArray(time,time2,5)==1){


LCD5110_writeText(FONT_3x5,3,32, 6,1,"BREAK TIME KIDS", 0x00);

PinSelect(6,1);




}else{
PinSelect(6,0);
LCD5110_writeText(FONT_3x5,3,32, 6,1,"               ", 0x00);
}
}
}



Keys=getKey();
if(Keys=='*'){
char back;
lastwriteaddr=0;
LCD_clear();

LCD5110_writeText(FONT_3x5,3,32, 1,1,"PRESS # FOR BACK", 0x00);
LCD5110_writeText(FONT_3x5,3,32, 2,1,"ENTER NO OF RINGS", 0x00);


Keys=getKey();
while(Keys !='#'){
unsigned char counter=0;
while(Keys !='*'){
switch (Keys)
{
case 0:
break;

case '0': case '1': case '2': case '3': case '4':
case '5': case '6': case '7': case '8': case '9':
ringsno[counter]= Keys;
++counter;
break;
}
Keys=getKey();
back = 0;

if(Keys == '#'){
back =1; Keys = '*';
}
}
if(back == 0){
ringsno[counter]='\0';
LCD5110_writeText(FONT_3x5,3,32, 3,3,"NO:", 0x00);
LCD5110_writeText(FONT_3x5,3,32, 3,7,ringsno, 0x00);

# 166
char *myrings;
myrings = ringsno;
for(unsigned char x=0; x<counter; x++){

Ringsno1 = (10*(Ringsno1) + keypadMap[*(myrings++)-'0']);
}

if(Ringsno1 == 0) { LCD5110_writeText(FONT_3x5,3,32, 4,2,"NOT VALID", 0x00);Keys = '#'; _delay((unsigned long)((1000)*(20000000/4000.0))); Ringsno1 = 0;}
if(Ringsno1 > 15) { LCD5110_writeText(FONT_3x5,3,32, 4,1,"MAX-NO-EXCEEDED", 0x00);Keys='#';_delay((unsigned long)((2000)*(20000000/4000.0))); Ringsno1 = 0;}

LCD_clear();

lastwriteaddr=0;
for(unsigned char x=1; x<=Ringsno1;x++){
Keys = readAndStore(time,x);
LCD_clear();
}
}else{ Keys ='#';
}
}
}

if(Keys == '0'){
if(SetupTime(time)){

LCD5110_writeText(FONT_3x5,3,32, 5,3,"SAVE SUCESSFULL", 0x00);
_delay((unsigned long)((1000)*(20000000/4000.0)));
LCD5110_clear();
}else{

LCD5110_writeText(FONT_3x5,3,32, 5,3,"WRONG INPUT    ", 0x00);
_delay((unsigned long)((1000)*(20000000/4000.0)));
LCD5110_clear();

}

}
}
}

char readAndStore(char *Time, unsigned char x){
char *time;
char Keys,round,round1,round2;
round= Binary2BCD(x);
time = Time;
unsigned char terminated=0;

time[0]= '0';
time[1]= '0';
time[3]= '0';
time[4]= '0';
time[6]= '0';
time[7]= '0';


LCD5110_writeText(FONT_3x5,3,32, 1,3,"RINGS:", 0x00);
round1 = BCD2UpperCh(round);round2 = BCD2LowerCh(round);LCD5110_writeCP(FONT_3x5,3,32,round1);;LCD5110_writeCP(FONT_3x5,3,32,round2);

LCD5110_writeText(FONT_3x5,3,32, 3,1,"TIME:", 0x00);



terminated = readKeys(time);


if(terminated == 0){

while(Keys!='*') Keys = getKey();

if(writeArrayToRAM(time,lastwriteaddr)){
LCD5110_writeText(FONT_3x5,3,32, 5,1,"SAVE SUCESSFULL", 0x00);

_delay((unsigned long)((2000)*(20000000/4000.0)));
}else{
LCD5110_writeText(FONT_3x5,3,32,5,1,"SAVE FAILED    ", 0x00);

}

return '#';

}
if (terminated ==1){

if(writeArrayToRAM(time,lastwriteaddr)){


LCD5110_writeText(FONT_3x5,3,32, 5,1,"SAVE SUCESSFULL", 0x00);
_delay((unsigned long)((2000)*(20000000/4000.0)));
}else{

LCD5110_writeText(FONT_3x5,3,32, 5,1,"SAVE FAILED    ", 0x00);
_delay((unsigned long)((1000)*(20000000/4000.0)));
}
return '#';
}

}


unsigned char writeArrayToRAM(char *timearray, unsigned char address){
char *mytime;

unsigned char hr=0,mins=0;
mytime = timearray;
unsigned char address1 = address;

for(unsigned char x=0; x<5; x++){

if(x<2) hr = 10*(hr) + keypadMap[*(mytime++)-'0'];

if(x==2) *(mytime++);
if (x>2) mins = 10*(mins)+ keypadMap[*(mytime++)-'0'];

}
if((hr > 24)||(mins > 60)) return 0;
RAM_write(address1,hr); address1= address1+2;
RAM_write(address1,mins);
lastwriteaddr +=4;
return 1;

}
void ReadArrayFromRAM(char *timearray){
char *mytime;
unsigned char hr=0,mins=0;
mytime = timearray;


mins = RAM_read(lastwritecount);lastwritecount = lastwritecount-2;mins =Binary2BCD(mins);
hr= RAM_read(lastwritecount);hr= Binary2BCD(hr);
mytime[0]=BCD2UpperCh(hr);
mytime[1]=BCD2LowerCh(hr);
mytime[3]=BCD2UpperCh(mins);
mytime[4]=BCD2LowerCh(mins);

}

unsigned char compareTimeArray(char *time, char *time2,int size){
for (int x=0; x<size;x++){
if(*(time++) != *(time2++))return 0;
}
return 1;
}


unsigned char SetupTime( char *timearray){

timearray[0]= '0';timearray[1]= '0';timearray[3]= '0';timearray[4]= '0';timearray[6]= '0';timearray[7]= '0';
char terminated,Keys;
unsigned char hr=0,mins=0;

LCD5110_clear();
LCD5110_writeText(FONT_3x5,3,32, 3,5,timearray, 0x00);

terminated = readKeys(timearray);
if(terminated == 0){
while(Keys!='*') Keys = getKey();

for(unsigned char x=0; x<5; x++){
if(x<2) hr = 10*(hr) + keypadMap[*(timearray++)-'0'];
if(x==2) *(timearray++);
if (x>2) mins = 10*(mins)+ keypadMap[*(timearray++)-'0'];
}
if((hr > 24)||(mins > 60)) return 0;
Time_write(hr,mins,0);
}
if(terminated == 1){
for(unsigned char x=0; x<5; x++){
if(x<2) hr = 10*(hr) + keypadMap[*(timearray++)-'0'];
if(x==2) *(timearray++);
if (x>2) mins = 10*(mins)+ keypadMap[*(timearray++)-'0'];
}
if((hr > 24)||(mins > 60)) return 0;
Time_write(hr,mins,0); return 1;
}

}



unsigned char readKeys(char *time){
unsigned char count= 0,terminated=0;

while(count<8){
LCD5110_writeText(FONT_3x5,3,32, 3,5,time, 0x00);
Keys1=getKey();
switch(Keys1){
case 0:
if((count == 2)||(count== 5)){Keys1 =':'; time[count] = Keys1; ++count;LCD5110_writeText(FONT_3x5,3,32, 3,5,time, 0x00); terminated =0;}
break;

case '0': case '1': case '2': case '3': case '4':
case '5': case '6': case '7': case '8': case '9':

time[count] = Keys1;
++count;

LCD5110_writeText(FONT_3x5,3,32, 3,5,time, 0x00);
terminated =0;
break;
case '*':
count = 8;
terminated =1;
break;
case'#':
--count;
if ((count != 2)&&(count !=5)) time[count] = '0';
LCD5110_writeText(FONT_3x5,3,32, 3,5,time, 0x00);

break;

}
}
return terminated;
}

void LCD_clear(){
LCD5110_clear();
LCD5110_fillScreen(0xFF);
_delay((unsigned long)((1000)*(20000000/4000.0)));
LCD5110_clear();
}

